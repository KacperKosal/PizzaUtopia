@page "/cart"
@using PizzaUtopia.Components.Models
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<link rel="stylesheet" href="css/Cart.css">
<div class="header">
    <img src="Images/logopizzy.png" alt="Pizza Icon">
    <h1>Mój koszyk</h1>
</div>
<div class="cart-container">
    @if (!CartItems.Any())
    {
        <p>Twój koszyk jest pusty.</p>
    }
    else
    {
        @foreach (var item in CartItems)
        {
            <div class="cart-item">
                <img src="@item.ImageUrl" alt="@item.Name">
                <div>
                    <div class="cart-item-title">@item.Name</div>
                    <div class="cart-item-quantity">
                        <button class="quantity-button" @onclick="() => UpdateQuantity(item, -1)">-</button>
                        Ilość: @item.Quantity
                        <button class="quantity-button" @onclick="() => UpdateQuantity(item, 1)">+</button>
                    </div>
                </div>
            </div>
        }
    }
</div>
<button class="checkout-button" @onclick="RedirectToFinalization">Dokończ zamówienie</button>
<!-- Dolny pasek nawigacyjny -->
<div class="bottom-nav">
    <button class="nav-button">
        <img src="Images/home-icon.png" alt="Home" @onclick="RedirectToMenu">
    </button>
    <button class="nav-button">
        <img src="Images/cart-icon.png" alt="Cart" />
    </button>
    <button class="nav-button">
        <img src="Images/profile-icon.png" alt="Profile" @onclick="RedirectToProfile">
    </button>
</div>
@code {
    private List<CartItem> CartItems { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var cartJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cart");
        if (!string.IsNullOrWhiteSpace(cartJson))
        {
            CartItems = JsonSerializer.Deserialize<List<CartItem>>(cartJson) ?? new();
        }
    }
    private void UpdateQuantity(CartItem item, int change)
    {
        item.Quantity = Math.Max(item.Quantity + change, 0);
        if (item.Quantity == 0)
        {
            CartItems.Remove(item);
        }
        SaveCart();
    }
    private async void SaveCart()
    {
        var cartJson = JsonSerializer.Serialize(CartItems);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cart", cartJson);
    }
    private void RedirectToFinalization() => Navigation.NavigateTo("/finalization");
    private void RedirectToMenu() => Navigation.NavigateTo("/menu");
    private void RedirectToProfile() => Navigation.NavigateTo("/profile");
}